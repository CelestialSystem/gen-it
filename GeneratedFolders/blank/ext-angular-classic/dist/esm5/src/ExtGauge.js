import { __decorate, __extends, __param } from "tslib";
//import EWCGauge from '../dist/ext-gauge.component.js';
//inputs: (new EWCGauge()).properties,
//import EWCGauge from '@sencha/ext-web-components-classic/dist/ext-gauge.component.js';
import { EWCGauge } from '@sencha/ext-web-components-classic';
import { Host, Optional, SkipSelf, Component, ElementRef, forwardRef, ViewContainerRef } from '@angular/core';
import { EngBase } from './common/angularbase';
var ExtGaugeComponent = /** @class */ (function (_super) {
    __extends(ExtGaugeComponent, _super);
    function ExtGaugeComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'angleOffset', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'clockwise', 'cls', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'focusCls', 'height', 'hidden', 'hideMode', 'instanceCls', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'maxValue', 'minValue', 'name', 'nameable', 'needle', 'padding', 'plugins', 'publishes', 'reference', 'renderTo', 'ripple', 'session', 'shareableName', 'style', 'textAlign', 'textOffset', 'textTpl', 'touchAction', 'trackLength', 'trackStart', 'trackStyle', 'twoWayBindable', 'ui', 'userCls', 'value', 'valueStyle', 'viewModel', 'width',], (new EWCGauge()).events, ['ready', 'created', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'widthchange',], vc) || this;
        _this.xtype = 'gauge';
        return _this;
    }
    ExtGaugeComponent_1 = ExtGaugeComponent;
    ExtGaugeComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGaugeComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGaugeComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGaugeComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGaugeComponent_1;
    ExtGaugeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGaugeComponent = ExtGaugeComponent_1 = __decorate([
        Component({
            selector: 'ExtGauge',
            inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'angleOffset', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'clockwise', 'cls', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'focusCls', 'height', 'hidden', 'hideMode', 'instanceCls', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'maxValue', 'minValue', 'name', 'nameable', 'needle', 'padding', 'plugins', 'publishes', 'reference', 'renderTo', 'ripple', 'session', 'shareableName', 'style', 'textAlign', 'textOffset', 'textTpl', 'touchAction', 'trackLength', 'trackStart', 'trackStyle', 'twoWayBindable', 'ui', 'userCls', 'value', 'valueStyle', 'viewModel', 'width',],
            outputs: ['ready', 'created', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'widthchange',],
            providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGaugeComponent_1; }) }],
            template: '<ng-content></ng-content>'
        }),
        __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGaugeComponent);
    return ExtGaugeComponent;
}(EngBase));
export { ExtGaugeComponent };
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGauge()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);
//# sourceMappingURL=data:application/json;base64,